using System.Text;
using System.Linq;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Misc
{
    public class QuantityExtractor
    {
        private static readonly string[] QUANTITY_RULES =
        {
            ////////////////////////////////////////////////////////////////////////////////
            //
            // 加载正则规则。
            //
            ////////////////////////////////////////////////////////////////////////////////

            // 正则表达式
            // 编号
            "0\\d*", //编号
            "No.\\d*", //编号
            // 整数
            "-?[1-9]\\d*", //整数
            "[1-9]\\d*[\\s]?-[\\s]?[1-9]\\d*", //整数
            "[1-9]\\d{0,2}(,\\d{3})+", //整数
            "[1-9]\\d*[\\s]?[十|百|千|万|亿]", //整数
            "[1-9]\\d*[\\s]?[十|百|千|万|亿|兆]亿", //整数
            // 百分数
            "\\d+(\\.\\d+)?%", //百分数
            "\\d+(\\.\\d+)?%-\\d+(\\.\\d+)?%", //百分数
            // 分数
            "[1-9]\\d*[\\s]?/[\\s]?[1-9]\\d*", //分数
            "[1-9]\\d*[\\s]?/[\\s]?[1-9]\\d*-[1-9]\\d*/[1-9]\\d*", //分数
            // 英文单词
            "[A-Za-z][\'A-Za-z]*", //英文
            // 浮点数
            "-?([1-9]\\d*\\.\\d+|0\\.\\d*[1-9]\\d*|0?\\.0+)", //浮点数
            "([1-9]\\d*\\.\\d+|0\\.\\d*[1-9]\\d*|0?\\.0+)[\\s]?[十|百|千|万|亿]", //浮点数
            "([1-9]\\d*\\.\\d+|0\\.\\d*[1-9]\\d*|0?\\.0+)[\\s]?[十|百|千|万|亿|兆]亿", //浮点数

            // 日期
            "(\\d{4}|\\d{2})[\\s]?年", //日期
            "(0?[1-9]|1[0-2])[\\s]?月", //日期
            "((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?号", //日期
            "((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?日", //日期
            "(\\d{4}|\\d{2})[\\s]?年[\\s]?((1[0-2])|(0?[1-9]))[\\s]?月", //日期
            "(0?[1-9]|1[0-2])[\\s]?月((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?日", //日期
            "(\\d{4}|\\d{2})-((1[0-2])|(0?[1-9]))[\\s]?-[\\s]?(([12][0-9])|(3[01])|(0?[1-9]))", //日期
            "(\\d{4}|\\d{2})[\\s]?年((1[0-2])|(0?[1-9]))[\\s]?月(([12][0-9])|(3[01])|(0?[1-9]))[\\s]?日", //日期
            // 时间
            "((1|0?)[0-9]|2[0-3])[\\s]?时", //时间
            "((1|0?)[0-9]|2[0-3])[\\s]?:[\\s]?([0-5][0-9])", //时间
            "((1|0?)[0-9]|2[0-3])[\\s]?时([0-5][0-9])[\\s]?分", //时间
            "((1|0?)[0-9]|2[0-3])[\\s]?点([0-5][0-9])[\\s]?分", //时间
            "((1|0?)[0-9]|2[0-3])[\\s]?:[\\s]?([0-5][0-9])[\\s]?:[\\s]?([0-5][0-9])", //时间
            "((1|0?)[0-9]|2[0-3])[\\s]?时[\\s]?([0-5][0-9])分([0-5][0-9])[\\s]?秒", //时间
            "((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?日[\\s]?((1|0?)[0-9]|2[0-3])[\\s]?时[\\s]?([0-5][0-9])[\\s]?分", //时间
            // 时间段
            "(\\d{4}|\\d{2})[\\s]?年[\\s]?-[\\s]?(\\d{4}|\\d{2})[\\s]?年", //时间段
            "(\\d{4}|\\d{2})[\\s]?/[\\s]?(\\d{4}|\\d{2})[\\s]?财年", //时间段
            "((1|0?)[0-9]|2[0-3])[\\s]?[点|时][\\s]?-[\\s]?((1|0?)[0-9]|2[0-3])[\\s]?[点|时]", //时间段
            "((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?[日|号][\\s]?-[\\s]?((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?[日|号]", //时间段
            "(\\d{4}|\\d{2})年((1[0-2])|(0?[1-9]))[\\s]?月[\\s]?-[\\s]?(\\d{4}|\\d{2})年((1[0-2])|(0?[1-9]))[\\s]?月", //时间段
            "((1[0-2])|(0?[1-9]))[\\s]?月[\\s]?(([12][0-9])|(3[01])|(0?[1-9]))[\\s]?日[\\s]?-[\\s]?((1[0-2])|(0?[1-9]))[\\s]?月[\\s]?(([12][0-9])|(3[01])|(0?[1-9]))[\\s]?日", //时间段
            "(\\d{4}|\\d{2})[\\s]?年[\\s]?((1[0-2])|(0?[1-9]))[\\s]?月[\\s]?(([12][0-9])|(3[01])|(0?[1-9]))[\\s]?日[\\s]?-[\\s]?(\\d{4}|\\d{2})[\\s]?年[\\s]?((1[0-2])|(0?[1-9]))[\\s]?月[\\s]?(([12][0-9])|(3[01])|(0?[1-9]))[\\s]?日", //时间段

            // 特殊标识
            // 身份证号码
            "\\d{15}(\\d\\d[0-9xX])?", //身份证
            // 国内电话号码（易混淆）
            "(\\d{4}|\\d{3})?[\\s]?-[\\s]?(\\d{8}|\\d{7})", //电话
            "(\\d{4}|\\d{3})?[\\s]?-[\\s]?(\\d{4}|\\d{3})?-[\\s]?(\\d{4}|\\d{3})", //电话
            // HTML标记（易混淆、有死循环可能）
            // "<(.*)(.*)>.*<\\/\\1>|<(.*) \\/>", //HTML标记
            // EMail地址
            "\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*", //电子邮箱
            // IP地址
            "((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)", //IP地址
            // URL地址（易混淆）
            "\\b(([\\w-]+://?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))", //URL地址

            ////////////////////////////////////////////////////////////////////////////////
            //
            // 加载数词规则。
            //
            ////////////////////////////////////////////////////////////////////////////////

            // 数词
            "$n[\\.|\\)]", //编号
            "“[\\s]?$n[\\s]?”", //编号
            "[0-9][\\dA-Za-z]*", //编号
            "$e+$n", //编号
            "$e+$n$e*", //编号
            "“[\\s]?$n[\\s]?·$n[\\s]?”", //编号
            "\\([\\s]?$n[\\s]?\\)|\\<[\\s]?$n[\\s]?\\>|\\{[\\s]?$n[\\s]?\\}", //编号

            "$d[多|余](万|亿)", //数量
            "$d[\\s]?:[\\s]?$d", //比例
            "$d[\\s]?(~|至)[\\s]?$d", //区间

            "(零|$c){2,}", //序号
            "十$c", //十位数
            "$c十$c?", //十位数
            "$c百(零|$c十)?$c?", //百位数
            "$c千((零|$c百)?(零|$c十)?$c?)", //千位数
            "$c千((零|$c百)?(零|$c十)?$c?)万", //万位数
            "$c万((零|$c千)?((零|$c百)?(零|$c十)?$c?))", //万位数

            "$f个百分点", //百分点
            "百分之零点(几|(零|$c)+)", //百分数
            "百分之(($c?百)|((($c十)|十)?$c?))", //百分数
            "百分之(($c?百)|((($c十)|十)?$c?))($c|几|左右)?", //百分数

            ////////////////////////////////////////////////////////////////////////////////
            //
            // 加载序号规则。
            //
            ////////////////////////////////////////////////////////////////////////////////

            "第$d", //序数
            "第[\\s]?$d[\\s]?$q", //序数

            "第$c", //序数
            "第[\\s]?$c[\\s]?$q", //序数

            "第十$c?", //序数
            "第[\\s]?十$c?[\\s]?$q", //序数

            "第$c十$c?", //序数
            "第[\\s]?$c十$c?[\\s]?$q", //序数

            "第$c百(零|$c十)?$c?", //序数
            "第[\\s]?$c百(零|$c十)?$c?[\\s]?$q", //序数

            ////////////////////////////////////////////////////////////////////////////////
            //
            // 加载数量词规则。
            //
            ////////////////////////////////////////////////////////////////////////////////

            "$d($q|$u)", //数量

            "$d[\\s]?[多|余]($q|$u)", //约数

            "几(亿|万|千|百|十)[\\s]?($q|$u)", //约数

            "$c[\\s]?($q|$u)", //数量

            "十$c?[\\s]?($q|$u)", //数量

            "$c十$c?[\\s]?($q|$u)", //数量

            "$c百(零|$c十)?$c?[\\s]?($q|$u)", //数量

            "$c千(零|$c百)?(零|$c十)?$c?[\\s]?($q|$u)", //数量

            "(十|$c)万(零|$c千)?(零|$c百)?(零|$c十)?$c?[\\s]?($q|$u)", //数量

            "$f[\\s]?($v)", //数量

            ////////////////////////////////////////////////////////////////////////////////
            //
            // 加载约数规则。
            //
            ////////////////////////////////////////////////////////////////////////////////

            "$f[\\s]?(亿|万|千|百)?(余|多)?($q|$u)", //约数

            "(十|$c)[\\s]?(亿|万|千|百|十)(余|多)?($q|$u)", //约数

            ////////////////////////////////////////////////////////////////////////////////
            //
            // 加载货币规则。
            //
            ////////////////////////////////////////////////////////////////////////////////

            "$f[\\s]?(百|千|万)?(亿|万)?(余|多)?$y", //货币

            "$f[\\s]?[多|余]?(百|千|万)?(亿|万)?(余|多)?$y", //货币

            "[1-9]\\d{0,2}(,\\d{3})+(百|千|万)?(亿|万)?(余|多)?$y", //货币

            ////////////////////////////////////////////////////////////////////////////////
            //
            // 加载时间规则。
            //
            ////////////////////////////////////////////////////////////////////////////////

            // 时间
            "[1-9]\\d*[\\s]?个月", //月
            "[过]?年[前|中|底|后]", //年
            "(第)?(一|二|三|四)季[度]?", //季度
            "周[一|二|三|四|五|六|日]", //周
            "星期[一|二|三|四|五|六|日]", //星期
            "((1[0-2])|(0?[1-9]))[\\s]?月份", //月份
            "([1-9]\\d*[\\s]?、)+([1-9]\\d*[\\s]?)(一|二|三|四|五|六|七|八|九|十|十一|十二)个月", //月
            "(((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?、)*((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?日", //日期
            "((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?至[\\s]?((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?日", //日期
            "((1[0-2])|(0?[1-9]))[\\s]?月[\\s]?(((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?日)(、((0?[1-9])|((1|2)[0-9])|30|31)[\\s]?日)*", //日期

            ////////////////////////////////////////////////////////////////////////////////
            //
            // 加载其他规则。
            //
            ////////////////////////////////////////////////////////////////////////////////

            // 特殊词汇
            "[双|两|叁|多][\\s]?(方|点|个|项|次|根|颗|条|名|套|份)", //数量

            // 航班
            "$e+$n次[\\s]?航班", //航班
            // 股票
            "(A|B|H)股", //股票
            // 油料
            "$n#", //油料
            "$f个油", //油耗
            // 维生素
            "维生素(A|B|C|D|E|K|H|P|M|T|U)\\d{0,2}", //维生素
        };

        public static Quantity[] GetQuantities(string content)
        {
            // 检查参数
            if (content == null ||
                content.Length <= 0) return null;

            // 参数
            Quantity[] output;
            
            // 获得匹配的项目
            output = GetMatches(content);
            // 检查结果
            if (output == null && output.Length <= 0) return null;

            // 创建对象
            List<Quantity> quantities = new List<Quantity>();
            // 循环处理
            for (int i = 0;i < content.Length;i ++ )
            {
                // 获得字符
                char c = GetInsideChar(output, i);
                // 检查结果
                if(c != '\0')
                {
                    // 创建对象
                    Quantity q = new Quantity();
                    // 记录索引位置
                    q.Index = i;
                    // 创建对象
                    StringBuilder sb = new StringBuilder();
                    // 循环处理
                    while(c != '\0')
                    {
                        // 增加字符
                        sb.Append(c);
                        // 增加计数
                        i++;
                        // 检查字符
                        c = GetInsideChar(output, i);
                    }
                    // 设置参数
                    q.Length = sb.Length;
                    q.Value = sb.ToString();
                    // 增加对象
                    quantities.Add(q);
                }
            }
            // 返回结果
            return quantities.ToArray();
        }

        public static Quantity GetInside(Quantity[] quantities, int index)
        {
            foreach (Quantity q in quantities)
            {
                // 检查索引位置
                if (index >= q.Index &&
                    index < q.Index + q.Length) return q;
            }
            // 返回结果
            return null;
        }

        public static char GetInsideChar(Quantity[] quantities, int index)
        {
            foreach(Quantity q in quantities)
            {
                // 检查索引位置
                if(index >= q.Index &&
                    index < q.Index + q.Length) return q.Value[index - q.Index];
            }
            // 返回结果
            return '\0';
        }

        private static Quantity[] GetMatches(string content)
        {
            // 创建对象
            List<Quantity> quantities = new List<Quantity>();
            // 循环处理
            foreach(string rule in QUANTITY_RULES)
            {
                // 恢复规则
                string newRule = Quantity.RecoverRule(rule);
                // 检查匹配
                // 此函数非常消耗时间！！！
                Match match = Regex.Match(content, newRule);
                // 检查结果
                while(match.Success)
                {
                    // 创建对象
                    Quantity quantity =
                        new Quantity();
                    // 设置数值
                    quantity.Index = match.Index;
                    quantity.Value = match.Value;
                    quantity.Length = match.Length;
                    // 加入列表
                    quantities.Add(quantity);
                    // 下一个
                    match = match.NextMatch();
                }
            }
            // 按照索引数值排序
            quantities = quantities.OrderBy(q => q.Index).ToList();
            // 返回结果
            return quantities.ToArray();
        }
    }
}
